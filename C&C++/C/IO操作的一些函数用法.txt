1、输出函数 puts()
    头文件：stdio.h
    函数原型：int puts(const char *string);
    功能：
        向控制台输出一串字符串，即送一字符串到stdout中
    参数：
        string 字符串指针，输入可以是字符串数组，也可以是字符串常量
    输出：成功标志
        函数的返回值为一个整形数据，标志函数执行是否成功。若字符串成功输出，则返回值为非负数（通常为0）；若字符串输出失败，则返回值为EOF（通常为-1）。

    特性：
        puts()和printf()都能够用来输出字符串，但是两者有些许不同。puts()在输出字符串后，会自动换行，而printf不会自动换行。两者有如下关系：
            puts(s)↔printf(“%s\n”,s);
            puts()函数仍然以’\0’来确定字符串的结尾。
            puts()函数只能够输出字符串，参数只能是字符指针。输入若为其他类型数据或指针，编译器报错，无法进行数据类型转换。

2、sprintf() 
    是个变参函数，作用是格式化字符串
    函数原型： 
        int sprintf( char* buffer, const char* format [, argument], … ); //format格式和printf()的格式控制符一样 
    参数列表：
        buffer：char型指针，指向将要写入的字符串的缓冲区。 
        format：格式化字符串。 
        [argument]…：可选参数，可以是任何类型的数据。 
    返回值：字符串长度（strlen），打印到buffer中的字符数目 
    功能： 
        1. 将数字变量转换为字符串 
        2. 得到整型变量的16进制和8进制字符串 
        3. 连接多个字符串 
    示例：
        char str[256] = { 0 };
        int data = 1024;
        sprintf(str,"%d",data);    //将data转换为字符串，输出：1024
        sprintf(str,"0x%X",data);  //获取data的十六进制，输出：0x400
        sprintf(str,"0%o",data);   //获取data的八进制，输出：02000

        const char *s1 = "Hello";
        const char *s2 = "World";
        sprintf(str,"%s %s",s1,s2);//连接字符串s1和s2，输出：Hello World

3、sscanf函数
    sscanf函数原型为int sscanf(const char *str, const char *format, ...)。将参数str的字符串根据参数format字符串来转换并格式化数据，
    转换后的结果存于对应的参数内。具体功能如下：
        （1）根据格式从字符串中提取数据。如从字符串中取出整数、浮点数和字符串等。
        （2）取指定长度的字符串
        （3）取到指定字符为止的字符串
        （4）取仅包含指定字符集的字符串
        （5）取到指定字符集为止的字符串
    sscanf可以支持格式字符%[]：
        (1)-: 表示范围，如：%[1-9]表示只读取1-9这几个数字 %[a-z]表示只读取a-z小写字母，类似地 %[A-Z]只读取大写字母
        (2)^: 表示不取，如：%[^1]表示读取除'1'以外的所有字符 %[^/]表示除/以外的所有字符
        (3),: 范围可以用","相连接 如%[1-9,a-z]表示同时取1-9数字和a-z小写字母 
        (4)原则：从第一个在指定范围内的数字开始读取，到第一个不在范围内的数字结束%s 可以看成%[] 的一个特例 %[^ ](注意^后面有一个空格！)
    示例：
        const char *s = "http://www.baidu.com:1234";
        char protocol[32] = { 0 };
        char host[128] = { 0 };
        char port[8] = { 0 };
        sscanf(s,"%[^:]://%[^:]:%[1-9]",protocol,host,port);

        printf("protocol: %s\n",protocol);
        printf("host: %s\n",host);
        printf("port: %s\n",port);

4、snprintf函数
    snprintf函数是sprintf函数的更加安全版本，考虑到字符串的字节数，防止了字符串溢出。
    函数形式为：int snprintf(char *restrict buf, size_t n, const char * restrict  format, ...);。
    最多从源串中拷贝n－1个字符到目标串中，然后再在后面加一个0。所以如果目标串的大小为n 的话，将不会溢出。
 
